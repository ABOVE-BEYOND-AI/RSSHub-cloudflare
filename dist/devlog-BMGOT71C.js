import"./config-HRWLmo66.js";import"./logger-DHpG8Bim.js";import"./helpers-LVq640iW.js";import{cache_default as e}from"./cache-C3AIQtoX.js";import{art as t}from"./render-DE4LRFBD.js";import{parseDate as n}from"./parse-date-DHsdom8D.js";import"./ofetch-DRl42yaJ.js";import{__dirname as r}from"./esm-shims-BDPl6Msv.js";import{got_default as i}from"./got-BaOFZRd4.js";import{timezone as a}from"./timezone-BrxBCotj.js";import{invalid_parameter_default as o}from"./invalid-parameter-CfUmvEUg.js";import{isValidHost as s}from"./valid-host-JqD2S4D4.js";import c from"node:path";import{load as l}from"cheerio";const u={path:`/devlog/:user/:id`,categories:[`game`],example:`/itch/devlog/teamterrible/the-baby-in-yellow`,parameters:{user:`User id, can be found in URL`,id:`Item id, can be found in URL`},features:{requireConfig:!1,requirePuppeteer:!1,antiCrawler:!1,supportBT:!1,supportPodcast:!1,supportScihub:!1},name:`Developer Logs`,maintainers:[`nczitzk`],handler:d,description:"`User id` is the field before `.itch.io` in the URL of the corresponding page, e.g. the URL of [The Baby In Yellow Devlog](https://teamterrible.itch.io/the-baby-in-yellow/devlog) is `https://teamterrible.itch.io/the-baby-in-yellow/devlog`, where the field before `.itch.io` is `teamterrible`.\n\n  `Item id` is the field between `itch.io` and `/devlog` in the URL of the corresponding page, e.g. the URL for [The Baby In Yellow Devlog](https://teamterrible.itch.io/the-baby-in-yellow/devlog) is `https://teamterrible.itch.io/the-baby-in-yellow/devlog`, where the field between `itch.io` and `/devlog` is `the-baby-in-yellow`.\n\n  So the route is [`/itch/devlogs/teamterrible/the-baby-in-yellow`](https://rsshub.app/itch/devlogs/teamterrible/the-baby-in-yellow)."};async function d(u){let d=u.req.param(`user`)??``,f=u.req.param(`id`)??``;if(!s(d))throw new o(`Invalid user`);let p=`https://${d}.itch.io/${f}/devlog`,m=await i({method:`get`,url:p}),h=l(m.data),g=h(`.title`).toArray().map(e=>(e=h(e),{title:e.text(),link:e.attr(`href`),pubDate:a(n(e.text()),8)}));return g=await Promise.all(g.map(a=>e.tryGet(a.link,async()=>{let e=await i({method:`get`,url:a.link}),o=l(e.data);return a.author=e.data.match(/"author":{".*?","name":"(.*?)"/)[1],a.pubDate=n(e.data.match(/"datePublished":"(.*?)"/)[1]),a.description=t(c.join(r,`templates/description-6541c218.art`),{images:o(`.post_image`).toArray().map(e=>o(e).attr(`src`)),description:o(`.post_body`).html()}),a}))),{title:h(`title`).text(),link:p,item:g}}export{u as route};